name: CI for stormsentry-nginx (Github)

on:
  push:
    branches:
      - main
    paths:
      - 'Backend/nginx/**'

jobs:

  build-test-nginx:
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t stormsentry-nginx .
        working-directory: ./Backend/nginx

      - name: Run Docker container
        run: |
          docker run -d --name nginx-test -p 8080:80 stormsentry-nginx
          #wait for health check to verify service is booted before continuing to tests
          until [ "$(docker inspect --format='{{.State.Health.Status}}' nginx-test)" == "healthy" ]; do
              sleep 1;
              echo "Waiting for Nginx to be ready...";
          done


      - name: Test Nginx responses
        run: |
          response=$(curl -o /dev/null -s -w "%{http_code}\n" http://localhost:8080)
          if [ "$response" -ne 200 ]; then
            echo "Nginx did not return a 200 OK on the root path"
            exit 1
          fi
          #response=$(curl -o /dev/null -s -w "%{http_code}\n" -H "Content-Type: text/plain" http://localhost:8080/api/weather)
          #if [ "$response" -ne 415 ]; then
          #  echo "Nginx did not return a 415 Unsupported Media Type for /api/weather without JSON"
          #  exit 1
          #fi

      - name: Clean up
        run: docker rm -f nginx-test

      
  versioning:
    needs: build-test-nginx
    runs-on: ubuntu-latest  
    outputs: 
      version: ${{ steps.version.outputs.version }}
    steps:

    - name: Semantic Versioning
      id: version
      uses: paulhatch/semantic-version@v5.3.0
      with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          major_regexp_flags: ""
          minor_pattern: "(MINOR)"
          minor_regexp_flags: ""
          version_format: "${major}.${minor}.${patch}-prerelease${increment}"
          change_path: "./Backend/nginx"
          namespace: stormSentry
          bump_each_commit: true
          bump_each_commit_patch_pattern: ""
          search_commit_body: true
          user_format_type: "csv"
          enable_prerelease_mode: true
          debug: false
          version_from_branch: false
          
    - name: Output version
      run: echo "Generated version is ${{ steps.version.outputs.version }}"
        

  deploy:
    needs: versioning
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and Push Flask Docker image to AWS ECR
      run: |
        echo "Using version ${{ needs.versioning.outputs.version }}"
        docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/stormsentry-nginx:${{ needs.versioning.outputs.version }} ./Backend/nginx
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/stormsentry-nginx:${{ needs.versioning.outputs.version }}